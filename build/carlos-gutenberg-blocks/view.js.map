{"version":3,"file":"carlos-gutenberg-blocks/view.js","mappings":";;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACrD,MAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,gDAAgD,CAAC;EAE1FD,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;IACpB,MAAMC,MAAM,GAAGD,KAAK,CAACF,gBAAgB,CAAC,8BAA8B,CAAC;IACrE,MAAMI,aAAa,GAAGF,KAAK;IAC3B,IAAIG,iBAAiB,GAAG,CAAC;;IAEzB;IACA,MAAMC,aAAa,GAAGC,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACF,aAAa,IAAI,EAAE,CAAC;IAC1E,MAAMG,aAAa,GAAGF,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACC,aAAa,IAAI,CAAC,CAAC;IACzE,MAAMC,UAAU,GAAGH,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACE,UAAU,IAAI,CAAC,CAAC;IACnE,MAAMC,eAAe,GAAGC,UAAU,CAACR,aAAa,EAAEI,OAAO,CAACG,eAAe,IAAI,CAAC,CAAC;IAC/E,MAAME,gBAAgB,GAAGD,UAAU,CAACR,aAAa,EAAEI,OAAO,CAACK,gBAAgB,IAAI,CAAC,CAAC;;IAEjF;IACA,MAAMC,YAAY,GAAIC,KAAK,IAAK;MAC5B,MAAMC,KAAK,GAAGD,KAAK,CAACf,gBAAgB,CAAC,mBAAmB,CAAC;MACzDgB,KAAK,CAACf,OAAO,CAACgB,GAAG,IAAI;QACjBA,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,SAAS,CAAC;QAC/B,KAAKF,GAAG,CAACG,WAAW,CAAC,CAAC;QACtBH,GAAG,CAACC,SAAS,CAACG,GAAG,CAAC,SAAS,CAAC;MAChC,CAAC,CAAC;IACN,CAAC;;IAED;IACA,MAAMC,WAAW,GAAGA,CAAA,KAAM;MACtB;MACAnB,MAAM,CAACE,iBAAiB,CAAC,CAACa,SAAS,CAACC,MAAM,CAAC,QAAQ,CAAC;;MAEpD;MACAd,iBAAiB,GAAG,CAACA,iBAAiB,GAAG,CAAC,IAAIF,MAAM,CAACoB,MAAM;;MAE3D;MACA,MAAMC,QAAQ,GAAGrB,MAAM,CAACE,iBAAiB,CAAC;MAC1CmB,QAAQ,CAACN,SAAS,CAACG,GAAG,CAAC,QAAQ,CAAC;MAChCP,YAAY,CAACU,QAAQ,CAAC;IAC1B,CAAC;;IAED;IACA,IAAIrB,MAAM,CAACoB,MAAM,GAAG,CAAC,EAAE;MACnB,MAAME,UAAU,GAAGtB,MAAM,CAAC,CAAC,CAAC;MAC5BsB,UAAU,CAACP,SAAS,CAACG,GAAG,CAAC,QAAQ,CAAC;MAClCP,YAAY,CAACW,UAAU,CAAC;IAC5B;;IAEA;IACA,MAAMC,kBAAkB,GACnBf,eAAe,GAAG,GAAG,GACtBD,UAAU,GACVJ,aAAa,GACbO,gBAAgB,GAChB,CAAC;IAEL,MAAMc,SAAS,GAAGD,kBAAkB,GAAG,IAAI;;IAE3C;IACA,IAAIvB,MAAM,CAACoB,MAAM,GAAG,CAAC,EAAE;MACnBK,WAAW,CAACN,WAAW,EAAEK,SAAS,CAAC;IACvC;EACJ,CAAC,CAAC;AACN,CAAC,CAAC,C","sources":["webpack://carlos-gutenberg-blocks/./src/carlos-gutenberg-blocks/view.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    const blocks = document.querySelectorAll('.wp-block-create-block-carlos-gutenberg-blocks');\n\n    blocks.forEach(block => {\n        const groups = block.querySelectorAll('.cgb-floating-boxes-frontend');\n        const parentElement = block;\n        let currentGroupIndex = 0;\n\n        // Configuración de animación\n        const floatDuration = parseInt(parentElement?.dataset.floatDuration || 18);\n        const cycleDuration = parseInt(parentElement?.dataset.cycleDuration || 3);\n        const floatDelay = parseInt(parentElement?.dataset.floatDelay || 2);\n        const slideUpDuration = parseFloat(parentElement?.dataset.slideUpDuration || 1);\n        const slideOutDuration = parseFloat(parentElement?.dataset.slideOutDuration || 1);\n\n        // Función para animar un grupo\n        const animateGroup = (group) => {\n            const boxes = group.querySelectorAll('.cgb-floating-box');\n            boxes.forEach(box => {\n                box.classList.remove('animate');\n                void box.offsetWidth; // Forzar reflow\n                box.classList.add('animate');\n            });\n        };\n\n        // Función para cambiar entre grupos\n        const switchGroup = () => {\n            // Desactivar grupo actual\n            groups[currentGroupIndex].classList.remove('active');\n            \n            // Cambiar al siguiente grupo\n            currentGroupIndex = (currentGroupIndex + 1) % groups.length;\n            \n            // Activar nuevo grupo y animar\n            const newGroup = groups[currentGroupIndex];\n            newGroup.classList.add('active');\n            animateGroup(newGroup);\n        };\n\n        // Iniciar animaciones del primer grupo\n        if (groups.length > 0) {\n            const firstGroup = groups[0];\n            firstGroup.classList.add('active');\n            animateGroup(firstGroup);\n        }\n\n        // Calcular tiempo total de animación\n        const totalAnimationTime = \n            (slideUpDuration * 1.8) + \n            floatDelay + \n            floatDuration + \n            slideOutDuration + \n            1;\n\n        const totalTime = totalAnimationTime * 1000;\n\n        // Cambiar grupos periódicamente si hay más de un grupo\n        if (groups.length > 1) {\n            setInterval(switchGroup, totalTime);\n        }\n    });\n});"],"names":["document","addEventListener","blocks","querySelectorAll","forEach","block","groups","parentElement","currentGroupIndex","floatDuration","parseInt","dataset","cycleDuration","floatDelay","slideUpDuration","parseFloat","slideOutDuration","animateGroup","group","boxes","box","classList","remove","offsetWidth","add","switchGroup","length","newGroup","firstGroup","totalAnimationTime","totalTime","setInterval"],"sourceRoot":""}