{"version":3,"file":"carlos-gutenberg-blocks/view.js","mappings":";;;;AAAAA,QAAQ,CAACC,gBAAgB,CAAC,kBAAkB,EAAE,YAAW;EACrD,MAAMC,MAAM,GAAGF,QAAQ,CAACG,gBAAgB,CAAC,8BAA8B,CAAC;EAExED,MAAM,CAACE,OAAO,CAACC,KAAK,IAAI;IACpB,MAAMC,aAAa,GAAGD,KAAK,CAACF,gBAAgB,CAAC,mBAAmB,CAAC;;IAEjE;IACA,MAAMI,aAAa,GAAGF,KAAK,CAACG,OAAO,CAAC,uBAAuB,CAAC;IAC5D,MAAMC,aAAa,GAAGC,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACF,aAAa,IAAI,EAAE,CAAC;IAC1E,MAAMG,aAAa,GAAGF,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACC,aAAa,IAAI,CAAC,CAAC;IACzE,MAAMC,UAAU,GAAGH,QAAQ,CAACH,aAAa,EAAEI,OAAO,CAACE,UAAU,IAAI,CAAC,CAAC;IACnE,MAAMC,eAAe,GAAGC,UAAU,CAACR,aAAa,EAAEI,OAAO,CAACG,eAAe,IAAI,CAAC,CAAC;IAC/E,MAAME,gBAAgB,GAAGD,UAAU,CAACR,aAAa,EAAEI,OAAO,CAACK,gBAAgB,IAAI,CAAC,CAAC;;IAEjF;IACAC,OAAO,CAACC,GAAG,CAAC,qBAAqB,EAAE;MAC/BT,aAAa;MACbG,aAAa;MACbC,UAAU;MACVC,eAAe;MACfE;IACJ,CAAC,CAAC;;IAEF;IACA,MAAMG,SAAS,GAAGd,KAAK,CAACe,aAAa,CAAC,YAAY,CAAC;IACnD,IAAID,SAAS,EAAE;MACXA,SAAS,CAACE,KAAK,CAACC,WAAW,CAAC,kBAAkB,EAAE,GAAGb,aAAa,GAAG,CAAC;MACpEU,SAAS,CAACE,KAAK,CAACC,WAAW,CAAC,wBAAwB,EAAE,GAAGV,aAAa,GAAG,CAAC;MAC1EO,SAAS,CAACE,KAAK,CAACC,WAAW,CAAC,eAAe,EAAE,GAAGT,UAAU,GAAG,CAAC;MAC9DM,SAAS,CAACE,KAAK,CAACC,WAAW,CAAC,qBAAqB,EAAE,GAAGR,eAAe,GAAG,CAAC;MACzEK,SAAS,CAACE,KAAK,CAACC,WAAW,CAAC,sBAAsB,EAAE,GAAGN,gBAAgB,GAAG,CAAC;IAC/E;;IAEA;IACA,MAAMO,eAAe,GAAGA,CAAA,KAAM;MAC1BjB,aAAa,CAACF,OAAO,CAACoB,GAAG,IAAI;QACzBA,GAAG,CAACC,SAAS,CAACC,MAAM,CAAC,SAAS,CAAC;QAC/B,KAAKF,GAAG,CAACG,WAAW,CAAC,CAAC;QACtBH,GAAG,CAACC,SAAS,CAACG,GAAG,CAAC,SAAS,CAAC;MAChC,CAAC,CAAC;IACN,CAAC;;IAED;IACAL,eAAe,CAAC,CAAC;;IAEjB;IACA,MAAMM,kBAAkB,GACnBf,eAAe,GAAG,GAAG;IAAI;IAC1BD,UAAU;IAAgB;IAC1BJ,aAAa;IAAa;IAC1BO,gBAAgB;IAAU;IAC1B,CAAC,CAAC,CAAwB;;IAE9B,MAAMc,SAAS,GAAGD,kBAAkB,GAAG,IAAI,CAAC,CAAC;;IAE7C;IACAE,WAAW,CAACR,eAAe,EAAEO,SAAS,CAAC;EAC3C,CAAC,CAAC;AACN,CAAC,CAAC,C","sources":["webpack://carlos-gutenberg-blocks/./src/carlos-gutenberg-blocks/view.js"],"sourcesContent":["document.addEventListener('DOMContentLoaded', function() {\n    const blocks = document.querySelectorAll('.cgb-floating-boxes-frontend');\n\n    blocks.forEach(block => {\n        const floatingBoxes = block.querySelectorAll('.cgb-floating-box');\n        \n        // Obtener valores de los data attributes del contenedor principal\n        const parentElement = block.closest('[data-float-duration]');\n        const floatDuration = parseInt(parentElement?.dataset.floatDuration || 18);\n        const cycleDuration = parseInt(parentElement?.dataset.cycleDuration || 3);\n        const floatDelay = parseInt(parentElement?.dataset.floatDelay || 2);\n        const slideUpDuration = parseFloat(parentElement?.dataset.slideUpDuration || 1);\n        const slideOutDuration = parseFloat(parentElement?.dataset.slideOutDuration || 1);\n\n        // Debug\n        console.log('Animation Settings:', {\n            floatDuration,\n            cycleDuration,\n            floatDelay,\n            slideUpDuration,\n            slideOutDuration\n        });\n\n        // Aplicar variables CSS\n        const container = block.querySelector('.cgb-group');\n        if (container) {\n            container.style.setProperty('--float-duration', `${floatDuration}s`);\n            container.style.setProperty('--float-cycle-duration', `${cycleDuration}s`);\n            container.style.setProperty('--float-delay', `${floatDelay}s`);\n            container.style.setProperty('--slide-up-duration', `${slideUpDuration}s`);\n            container.style.setProperty('--slide-out-duration', `${slideOutDuration}s`);\n        }\n\n        // Función para reiniciar animaciones\n        const resetAnimations = () => {\n            floatingBoxes.forEach(box => {\n                box.classList.remove('animate');\n                void box.offsetWidth; // Forzar reflow\n                box.classList.add('animate');\n            });\n        };\n\n        // Iniciar animaciones\n        resetAnimations();\n\n        // Calcular tiempo total de animación\n        const totalAnimationTime = \n            (slideUpDuration * 1.8) + // Tiempo máximo de slide up (tercera caja)\n            floatDelay +              // Tiempo de espera\n            floatDuration +           // Duración del flotado\n            slideOutDuration +        // Duración del slide out\n            1;                        // Margen extra\n\n        const totalTime = totalAnimationTime * 1000; // Convertir a milisegundos\n        \n        // Reiniciar animaciones periódicamente\n        setInterval(resetAnimations, totalTime);\n    });\n});"],"names":["document","addEventListener","blocks","querySelectorAll","forEach","block","floatingBoxes","parentElement","closest","floatDuration","parseInt","dataset","cycleDuration","floatDelay","slideUpDuration","parseFloat","slideOutDuration","console","log","container","querySelector","style","setProperty","resetAnimations","box","classList","remove","offsetWidth","add","totalAnimationTime","totalTime","setInterval"],"sourceRoot":""}